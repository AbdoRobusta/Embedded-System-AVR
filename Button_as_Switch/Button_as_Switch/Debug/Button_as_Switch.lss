
Button_as_Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd9  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000630  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000769  00000000  00000000  0000251a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002c83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	b4 00       	.word	0x00b4	; ????
  56:	be 00       	.word	0x00be	; ????
  58:	c8 00       	.word	0x00c8	; ????
  5a:	d2 00       	.word	0x00d2	; ????
  5c:	db 00       	.word	0x00db	; ????
  5e:	db 00       	.word	0x00db	; ????
  60:	db 00       	.word	0x00db	; ????
  62:	db 00       	.word	0x00db	; ????
  64:	db 00       	.word	0x00db	; ????
  66:	db 00       	.word	0x00db	; ????
  68:	db 00       	.word	0x00db	; ????
  6a:	db 00       	.word	0x00db	; ????
  6c:	db 00       	.word	0x00db	; ????
  6e:	db 00       	.word	0x00db	; ????
  70:	db 00       	.word	0x00db	; ????
  72:	db 00       	.word	0x00db	; ????
  74:	db 00       	.word	0x00db	; ????
  76:	db 00       	.word	0x00db	; ????
  78:	db 00       	.word	0x00db	; ????
  7a:	db 00       	.word	0x00db	; ????
  7c:	db 00       	.word	0x00db	; ????
  7e:	db 00       	.word	0x00db	; ????
  80:	db 00       	.word	0x00db	; ????
  82:	db 00       	.word	0x00db	; ????
  84:	db 00       	.word	0x00db	; ????
  86:	db 00       	.word	0x00db	; ????
  88:	db 00       	.word	0x00db	; ????
  8a:	db 00       	.word	0x00db	; ????
  8c:	db 00       	.word	0x00db	; ????
  8e:	db 00       	.word	0x00db	; ????
  90:	db 00       	.word	0x00db	; ????
  92:	db 00       	.word	0x00db	; ????
  94:	b4 00       	.word	0x00b4	; ????
  96:	be 00       	.word	0x00be	; ????
  98:	c8 00       	.word	0x00c8	; ????
  9a:	d2 00       	.word	0x00d2	; ????
  9c:	e8 00       	.word	0x00e8	; ????
  9e:	01 01       	movw	r0, r2
  a0:	1a 01       	movw	r2, r20
  a2:	33 01       	movw	r6, r6
  a4:	4b 01       	movw	r8, r22
  a6:	4b 01       	movw	r8, r22
  a8:	4b 01       	movw	r8, r22
  aa:	4b 01       	movw	r8, r22
  ac:	4b 01       	movw	r8, r22
  ae:	4b 01       	movw	r8, r22
  b0:	4b 01       	movw	r8, r22
  b2:	4b 01       	movw	r8, r22
  b4:	4b 01       	movw	r8, r22
  b6:	4b 01       	movw	r8, r22
  b8:	4b 01       	movw	r8, r22
  ba:	4b 01       	movw	r8, r22
  bc:	4b 01       	movw	r8, r22
  be:	4b 01       	movw	r8, r22
  c0:	4b 01       	movw	r8, r22
  c2:	4b 01       	movw	r8, r22
  c4:	4b 01       	movw	r8, r22
  c6:	4b 01       	movw	r8, r22
  c8:	4b 01       	movw	r8, r22
  ca:	4b 01       	movw	r8, r22
  cc:	4b 01       	movw	r8, r22
  ce:	4b 01       	movw	r8, r22
  d0:	4b 01       	movw	r8, r22
  d2:	4b 01       	movw	r8, r22
  d4:	4b 01       	movw	r8, r22
  d6:	4b 01       	movw	r8, r22
  d8:	4b 01       	movw	r8, r22
  da:	4b 01       	movw	r8, r22
  dc:	e8 00       	.word	0x00e8	; ????
  de:	01 01       	movw	r0, r2
  e0:	1a 01       	movw	r2, r20
  e2:	33 01       	movw	r6, r6
  e4:	58 01       	movw	r10, r16
  e6:	6c 01       	movw	r12, r24
  e8:	80 01       	movw	r16, r0
  ea:	94 01       	movw	r18, r8
  ec:	a8 01       	movw	r20, r16
  ee:	a8 01       	movw	r20, r16
  f0:	a8 01       	movw	r20, r16
  f2:	a8 01       	movw	r20, r16
  f4:	a8 01       	movw	r20, r16
  f6:	a8 01       	movw	r20, r16
  f8:	a8 01       	movw	r20, r16
  fa:	a8 01       	movw	r20, r16
  fc:	a8 01       	movw	r20, r16
  fe:	a8 01       	movw	r20, r16
 100:	a8 01       	movw	r20, r16
 102:	a8 01       	movw	r20, r16
 104:	a8 01       	movw	r20, r16
 106:	a8 01       	movw	r20, r16
 108:	a8 01       	movw	r20, r16
 10a:	a8 01       	movw	r20, r16
 10c:	a8 01       	movw	r20, r16
 10e:	a8 01       	movw	r20, r16
 110:	a8 01       	movw	r20, r16
 112:	a8 01       	movw	r20, r16
 114:	a8 01       	movw	r20, r16
 116:	a8 01       	movw	r20, r16
 118:	a8 01       	movw	r20, r16
 11a:	a8 01       	movw	r20, r16
 11c:	a8 01       	movw	r20, r16
 11e:	a8 01       	movw	r20, r16
 120:	a8 01       	movw	r20, r16
 122:	a8 01       	movw	r20, r16
 124:	58 01       	movw	r10, r16
 126:	6c 01       	movw	r12, r24
 128:	80 01       	movw	r16, r0
 12a:	94 01       	movw	r18, r8

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	0e 94 c8 01 	call	0x390	; 0x390 <main>
 13c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <Button_vInit>:
 *  Author: abdo_essam_aboziad
 */ 
#include "button.h"
void Button_vInit(u8 copy_u8PortName,u8 copy_u8PinNum)
{
	DIO_vSetPinDirection(copy_u8PortName,copy_u8PinNum,0);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_vSetPinDirection>
 14a:	08 95       	ret

0000014c <Button_u8ReadValue>:
}
u8 Button_u8ReadValue(u8 copy_u8PortName,u8 copy_u8PinNum)
{
	u8 value;
	value=DIO_vSetReadPinValue(copy_u8PortName,copy_u8PinNum);
 14c:	0e 94 4c 01 	call	0x298	; 0x298 <DIO_vSetReadPinValue>
	return value ;
}
 150:	08 95       	ret

00000152 <DIO_vSetPinDirection>:
 */ 
#include "DIO.h"


void DIO_vSetPinDirection (u8 copy_u8PortName, u8 copy_u8PinNum, u8 copy_u8PinDirection){
	switch (copy_u8PortName)
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	e1 54       	subi	r30, 0x41	; 65
 158:	f1 09       	sbc	r31, r1
 15a:	e4 32       	cpi	r30, 0x24	; 36
 15c:	f1 05       	cpc	r31, r1
 15e:	58 f5       	brcc	.+86     	; 0x1b6 <DIO_vSetPinDirection+0x64>
 160:	e6 5d       	subi	r30, 0xD6	; 214
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__tablejump2__>
	{
		case 'A' :
		case 'a' :
		WRITE_BIT(DDRA,copy_u8PinNum,copy_u8PinDirection);
 168:	8a b3       	in	r24, 0x1a	; 26
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_vSetPinDirection+0x20>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_vSetPinDirection+0x1c>
 176:	48 2b       	or	r20, r24
 178:	4a bb       	out	0x1a, r20	; 26
		break;
 17a:	08 95       	ret
		case 'B':
		case 'b' :
			WRITE_BIT(DDRB,copy_u8PinNum,copy_u8PinDirection);
 17c:	87 b3       	in	r24, 0x17	; 23
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_vSetPinDirection+0x34>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_vSetPinDirection+0x30>
 18a:	48 2b       	or	r20, r24
 18c:	47 bb       	out	0x17, r20	; 23
		break;
 18e:	08 95       	ret
		case 'C':
		case 'c' :			
		WRITE_BIT(DDRC,copy_u8PinNum,copy_u8PinDirection);
 190:	84 b3       	in	r24, 0x14	; 20
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_vSetPinDirection+0x48>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_vSetPinDirection+0x44>
 19e:	48 2b       	or	r20, r24
 1a0:	44 bb       	out	0x14, r20	; 20
		break;
 1a2:	08 95       	ret
		case 'D':
		case 'd' :
			WRITE_BIT(DDRD,copy_u8PinNum,copy_u8PinDirection);
 1a4:	81 b3       	in	r24, 0x11	; 17
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vSetPinDirection+0x5c>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vSetPinDirection+0x58>
 1b2:	48 2b       	or	r20, r24
 1b4:	41 bb       	out	0x11, r20	; 17
 1b6:	08 95       	ret

000001b8 <DIO_vSetPinValue>:
		break;
	}
}
void DIO_vSetPinValue(u8 copy_u8PortName , u8 copy_u8PinNumber ,u8 copy_u8PinValue)
{
	switch (copy_u8PortName)
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	e1 54       	subi	r30, 0x41	; 65
 1be:	f1 09       	sbc	r31, r1
 1c0:	e4 32       	cpi	r30, 0x24	; 36
 1c2:	f1 05       	cpc	r31, r1
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vSetPinValue+0x10>
 1c6:	67 c0       	rjmp	.+206    	; 0x296 <DIO_vSetPinValue+0xde>
 1c8:	e2 5b       	subi	r30, 0xB2	; 178
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__tablejump2__>
	{
		case 'A':
		case 'a':
		if(copy_u8PinValue == 0)
 1d0:	41 11       	cpse	r20, r1
 1d2:	0c c0       	rjmp	.+24     	; 0x1ec <DIO_vSetPinValue+0x34>
		CLR_PIN(PORTA,copy_u8PinNumber);
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_vSetPinValue+0x28>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_vSetPinValue+0x24>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	08 95       	ret
		else
		SET_PIN(PORTA,copy_u8PinNumber);
 1ec:	2b b3       	in	r18, 0x1b	; 27
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_vSetPinValue+0x40>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_vSetPinValue+0x3c>
 1fc:	82 2b       	or	r24, r18
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	08 95       	ret
		//WRITE_BIT(PORTA,copy_u8PinNumber,copy_u8PinValue);
		break;

		case 'B':
		case 'b':
		if(copy_u8PinValue == 0)
 202:	41 11       	cpse	r20, r1
 204:	0c c0       	rjmp	.+24     	; 0x21e <DIO_vSetPinValue+0x66>
		CLR_PIN(PORTB,copy_u8PinNumber);
 206:	28 b3       	in	r18, 0x18	; 24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_vSetPinValue+0x5a>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_vSetPinValue+0x56>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
		else
		SET_PIN(PORTB,copy_u8PinNumber);
 21e:	28 b3       	in	r18, 0x18	; 24
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_vSetPinValue+0x72>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_vSetPinValue+0x6e>
 22e:	82 2b       	or	r24, r18
 230:	88 bb       	out	0x18, r24	; 24
 232:	08 95       	ret
		break;

		case 'C':
		case 'c':
		if(copy_u8PinValue == 0)
 234:	41 11       	cpse	r20, r1
 236:	0c c0       	rjmp	.+24     	; 0x250 <DIO_vSetPinValue+0x98>
		CLR_PIN(PORTC,copy_u8PinNumber);
 238:	25 b3       	in	r18, 0x15	; 21
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_vSetPinValue+0x8c>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_vSetPinValue+0x88>
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	85 bb       	out	0x15, r24	; 21
 24e:	08 95       	ret
		else
		SET_PIN(PORTC,copy_u8PinNumber);
 250:	25 b3       	in	r18, 0x15	; 21
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vSetPinValue+0xa4>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vSetPinValue+0xa0>
 260:	82 2b       	or	r24, r18
 262:	85 bb       	out	0x15, r24	; 21
 264:	08 95       	ret
		break;

		case 'D':
		case 'd':
		if(copy_u8PinValue == 0)
 266:	41 11       	cpse	r20, r1
 268:	0c c0       	rjmp	.+24     	; 0x282 <DIO_vSetPinValue+0xca>
		CLR_PIN(PORTD,copy_u8PinNumber);
 26a:	22 b3       	in	r18, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_vSetPinValue+0xbe>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_vSetPinValue+0xba>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	82 bb       	out	0x12, r24	; 18
 280:	08 95       	ret
		else
		SET_PIN(PORTD,copy_u8PinNumber);
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vSetPinValue+0xd6>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vSetPinValue+0xd2>
 292:	82 2b       	or	r24, r18
 294:	82 bb       	out	0x12, r24	; 18
 296:	08 95       	ret

00000298 <DIO_vSetReadPinValue>:
}

u8 DIO_vSetReadPinValue(u8 copy_u8PortName ,u8 copy_u8PinNumber)
{
	unsigned char return_value=0;
	switch(copy_u8PortName )
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	e1 54       	subi	r30, 0x41	; 65
 29e:	f1 09       	sbc	r31, r1
 2a0:	e4 32       	cpi	r30, 0x24	; 36
 2a2:	f1 05       	cpc	r31, r1
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <DIO_vSetReadPinValue+0x10>
 2a6:	54 c0       	rjmp	.+168    	; 0x350 <DIO_vSetReadPinValue+0xb8>
 2a8:	ee 58       	subi	r30, 0x8E	; 142
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__tablejump2__>
	{
		case 'A' :
		case 'a' :
		return_value=READ_PIN(PINA,copy_u8PinNumber);//Read the value from the given pin in port A
 2b0:	49 b3       	in	r20, 0x19	; 25
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	9c 01       	movw	r18, r24
 2b8:	06 2e       	mov	r0, r22
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_vSetReadPinValue+0x28>
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_vSetReadPinValue+0x24>
 2c4:	84 2f       	mov	r24, r20
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	82 23       	and	r24, r18
 2ca:	93 23       	and	r25, r19
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_vSetReadPinValue+0x3a>
 2ce:	95 95       	asr	r25
 2d0:	87 95       	ror	r24
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_vSetReadPinValue+0x36>
		break;
 2d6:	08 95       	ret
		
		case 'B' :
		case 'b' :
		return_value=READ_PIN(PINB,copy_u8PinNumber);//Read the value from the given pin in port B
 2d8:	46 b3       	in	r20, 0x16	; 22
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	9c 01       	movw	r18, r24
 2e0:	06 2e       	mov	r0, r22
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_vSetReadPinValue+0x50>
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_vSetReadPinValue+0x4c>
 2ec:	84 2f       	mov	r24, r20
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	82 23       	and	r24, r18
 2f2:	93 23       	and	r25, r19
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_vSetReadPinValue+0x62>
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_vSetReadPinValue+0x5e>
		break;
 2fe:	08 95       	ret
		
		case 'C' :
		case 'c' :
		return_value=READ_PIN(PINC,copy_u8PinNumber);//Read the value from the given pin in port C
 300:	43 b3       	in	r20, 0x13	; 19
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	9c 01       	movw	r18, r24
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_vSetReadPinValue+0x78>
 30c:	22 0f       	add	r18, r18
 30e:	33 1f       	adc	r19, r19
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_vSetReadPinValue+0x74>
 314:	84 2f       	mov	r24, r20
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	82 23       	and	r24, r18
 31a:	93 23       	and	r25, r19
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_vSetReadPinValue+0x8a>
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_vSetReadPinValue+0x86>
		break;
 326:	08 95       	ret
		
		case 'D' :
		case 'd' :
		return_value=READ_PIN(PIND,copy_u8PinNumber);//Read the value from the given pin in port D
 328:	40 b3       	in	r20, 0x10	; 16
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	9c 01       	movw	r18, r24
 330:	06 2e       	mov	r0, r22
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_vSetReadPinValue+0xa0>
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_vSetReadPinValue+0x9c>
 33c:	84 2f       	mov	r24, r20
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	82 23       	and	r24, r18
 342:	93 23       	and	r25, r19
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vSetReadPinValue+0xb2>
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vSetReadPinValue+0xae>
		break;
 34e:	08 95       	ret
	}
}

u8 DIO_vSetReadPinValue(u8 copy_u8PortName ,u8 copy_u8PinNumber)
{
	unsigned char return_value=0;
 350:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	return return_value ;
}
 352:	08 95       	ret

00000354 <Led_vTurnONLed>:
 *  Author: abdo_essam_aboziad
 */ 
#include "std_types.h"
#include "LED.h"

void Led_vTurnONLed(u8 copy_u8PortName,u8 copy_u8PinNum){
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	c8 2f       	mov	r28, r24
 35a:	d6 2f       	mov	r29, r22
	DIO_vSetPinDirection(copy_u8PortName,copy_u8PinNum,1);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_vSetPinDirection>
	DIO_vSetPinValue(copy_u8PortName,copy_u8PinNum,1);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	6d 2f       	mov	r22, r29
 366:	8c 2f       	mov	r24, r28
 368:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DIO_vSetPinValue>
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <Led_vTurnOFFLed>:
void Led_vTurnOFFLed(u8 copy_u8PortName,u8 copy_u8PinNum){
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	c8 2f       	mov	r28, r24
 378:	d6 2f       	mov	r29, r22
	DIO_vSetPinDirection(copy_u8PortName,copy_u8PinNum,1);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_vSetPinDirection>
	DIO_vSetPinValue(copy_u8PortName,copy_u8PinNum,0);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	6d 2f       	mov	r22, r29
 384:	8c 2f       	mov	r24, r28
 386:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DIO_vSetPinValue>
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <main>:
#include "button.h"


int main(void)
{
    Button_vInit('d',0);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	0e 94 a2 00 	call	0x144	; 0x144 <Button_vInit>
	u8 value;
	u8 flag = 0;
 398:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		value = Button_u8ReadValue('d',0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	84 e6       	ldi	r24, 0x64	; 100
 39e:	0e 94 a6 00 	call	0x14c	; 0x14c <Button_u8ReadValue>
		if ((value == 1) && (flag == 0))
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	41 f4       	brne	.+16     	; 0x3b6 <main+0x26>
 3a6:	c1 11       	cpse	r28, r1
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <main+0x26>
		{
			Led_vTurnONLed('a',0);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	81 e6       	ldi	r24, 0x61	; 97
 3ae:	0e 94 aa 01 	call	0x354	; 0x354 <Led_vTurnONLed>
			flag = 1;
 3b2:	c1 e0       	ldi	r28, 0x01	; 1
 3b4:	f2 cf       	rjmp	.-28     	; 0x39a <main+0xa>
		}
		 else if ((value == 1) && (flag == 1))
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	81 f7       	brne	.-32     	; 0x39a <main+0xa>
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	71 f7       	brne	.-36     	; 0x39a <main+0xa>
		{
			Led_vTurnOFFLed('a',0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e6       	ldi	r24, 0x61	; 97
 3c2:	0e 94 b9 01 	call	0x372	; 0x372 <Led_vTurnOFFLed>
			flag = 0;
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
 3c8:	e8 cf       	rjmp	.-48     	; 0x39a <main+0xa>

000003ca <__tablejump2__>:
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	05 90       	lpm	r0, Z+
 3d0:	f4 91       	lpm	r31, Z
 3d2:	e0 2d       	mov	r30, r0
 3d4:	09 94       	ijmp

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
